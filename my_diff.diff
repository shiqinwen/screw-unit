diff --git a/lib/screw.mock.js b/lib/screw.mock.js
index 538f477..4bedf97 100644
--- a/lib/screw.mock.js
+++ b/lib/screw.mock.js
@@ -8,7 +8,7 @@
 /** Test helper main namespace
     @namespace
 */
-var TH = (function () {
+Screw.Mock = (function () {
     /** @namespace */
     var publicObj = {};
     
@@ -22,12 +22,12 @@ var TH = (function () {
         @throws mock must be specified if no mock is specified
         
         @example
-          TH.insertDomMock("some_mock"); // will insert dom_mocks/some_mock.html into <div id='#dom_test'><div>
+          Screw.Mock.insertDom("some_mock"); // will insert dom_mocks/some_mock.html into <div id='#dom_test'><div>
           
-        @name TH.insertDomMock
+        @name Screw.Mock.insertDom
         @function
     */
-    publicObj.insertDomMock = function(mock, opts) {
+    publicObj.insertDom = function(mock, opts) {
         if (!mock) {
             throw new Error("mock must be specified");
         }
@@ -62,7 +62,7 @@ var TH = (function () {
     /** simulate a browser click on an element passed to the function
         @param {DomElement} el The element to receive the click
         
-        @name TH.click
+        @name Screw.Mock.click
         @function
     */
     publicObj.click = function(el) {
@@ -77,7 +77,7 @@ var TH = (function () {
     
     /** pause the operation of a page for X miliseconds
         @param {Number} millis the number of miliseconds to pause
-        @name TH.pause
+        @name Screw.Mock.pause
         @function
     */
     publicObj.pause = function (millis) {
@@ -91,253 +91,11 @@ var TH = (function () {
     return publicObj;    
 })();
 
-/** Mock out objects using a fairly simple interface.  Also adds some counting functions.
-    @example
-      var someObj = {
-          foo: function () { return 'bar' }
-      };
-      someObj.foo() == 'bar';
-      TH.Mock.Obj("someObj", {
-          foo: function () { return 'somethingElse' }
-      });
-      someObj.foo() == 'somethingElse'; // BUT!  Only for this test the next test will have a normal someObj;
-      
-    @example
-      var someObj = {
-          foo: function () { return 'bar' }
-      };
-      someObj.foo() == 'bar';
-      TH.Mock.Obj("someObj");
-      someObj.countCallsOf("foo");
-      someObj.foo() == true;
-      someObj.numberOfCallsTo("foo") == 1;
-      // using that you can then do cool expectations:  expect(someObj.numberOfCallsTo("foo")).to(equal, 1);
-
-    @namespace
-*/
-TH.Mock = (function () {
-    /** @namespace */
-    var publicObj = {};
-    /** the mocked out objects
-        @name TH.Mock.mockedObjects
-    */
-    publicObj.mockedObjects = {};
-    
-    /** taken from prototype - bind a function to a certain object
-        @private
-    */
-    var bind = function(func, obj) {
-        if (obj === undefined) return func;
-        var __method = func, object = obj;
-        return function() {
-          return __method.apply(object, jQuery.makeArray(arguments));
-        }
-    };
-    
-    /** taken from prototype - copy one object to another
-        @private
-    */
-    var extendObject = function (destination, source) {
-        for (var property in source) {
-            destination[property] = source[property];
-        }
-        return destination;
-    };
-    
-    /** this is used as a constructor to make a new mocked object and cache it
-        @private
-        @constructs
-    */
-    var MockedObject = function (props) {
-        extendObject(this, props);
-        this.countCallsCache = {};
-    };
-    
-    /** Adds the countCallsOf and numberOfCallsTo methods to any object that
-        is getting mocked
-        @private
-    */
-    MockedObject.prototype = {
-        countCallsOf: function (propString) {
-            this.countCallsCache[propString] = {};
-            var prop = this.countCallsCache[propString];
-            prop.count = 0;
-            this[propString] = bind(function () {
-                this.countCallsCache[propString].count++;
-            }, this);         
-        },
-        numberOfCallsTo: function(propString) {
-            return this.countCallsCache[propString].count;
-        }
-        
-    };
-    
-    /** main mocking interface
-        
-        @param {String} mockString the string representation of the object you are trying to mock
-        @param {Object} newObj (optional) functions you want to mock on the other object
-    
-        @throws if the mockString does not eval into an object
-    
-        @see TH.Mock
-        @name TH.Mock.obj
-        @function
-    */
-    publicObj.obj = function (mockString, newObj) {
-        var oldObj = eval(mockString);
-        var obj;
-        if (!(typeof oldObj == "object")) {
-            throw new Error("TH.Mock.obj called on a string that doesn't evaluate into an object");
-        }
-        obj = new MockedObject(oldObj);
-        extendObject(obj, newObj);
-        
-        publicObj.mockedObjects[mockString] = {};
-        publicObj.mockedObjects[mockString].newObj = obj;
-        publicObj.mockedObjects[mockString].oldObj = oldObj;
-        
-        eval(mockString + " = TH.Mock.mockedObjects['" + mockString + "'].newObj");
-        
-        return obj;
-    };
-    
-    /** Used in a before() to reset all the objects that have been mocked to their original splendor
-        @name TH.Mock.reset
-        @function
-    */
-    publicObj.reset = function () {
-        var m;
-        var obj;
-        for (mockString in publicObj.mockedObjects) {
-            if (publicObj.mockedObjects.hasOwnProperty(mockString)) {
-                eval(mockString + " = TH.Mock.mockedObjects['" + mockString + "'].oldObj");
-            }
-        }
-        publicObj.mockedObjects = {};
-    };
-    
-    /** this will let you call TH.Mock.numberOfCallsTo("name", "prop") - for convenience
-        @name TH.Mock.numberOfCallsTo
-        @function
-    */
-    publicObj.numberOfCallsTo = function (mockString, propString) {
-        var obj = eval(mockString);
-        return obj.numberOfCallsTo(propString);
-    };
-
-    // for dev
-    publicObj.dirMocks = function () {
-        console.dir(mockCache);
-    };
-    
-    publicObj.dirCountCalls = function () {
-        console.dir(countCallsCache);
-    };
-    
-    return publicObj;
-})();
-
-/** This mocks out Prototype's ajax calls so that you don't need a server in your tests
-    @example
-      TH.Ajax.mock("/a_url", "someText", 200);
-      var ajx = new Ajax.Request("/a_url", {
-          onComplete: function (resp) { response = resp }
-      });
-      expect(response.responseText).to(equal, "someText");
-      
-    @namespace
-*/
-TH.Ajax = (function () {
-    /** @namespace */
-    var publicObj = {};
-    
-    var mockAjaxHash = {};
-    
-    /** Lets you count the number of requests on a certain URL
-        @example
-          TH.Ajax.mock("/a_url", "someText", 200);
-           var ajx = new Ajax.Request("/a_url", {
-               onComplete: function (resp) { response = resp }
-           });
-           expect(TH.Ajax.requestCont["/a_url"]).to(equal, 1);
-    
-        @name TH.Ajax.requestCount
-    */
-    publicObj.requestCount = {};
-    
-    /** Reset the request count - used in a before()
-        @name TH.Ajax.reset
-        @function
-    */
-    publicObj.reset = function () {
-        publicObj.requestCount = {};
-    };
-    
-    /** this is the main mocking interface
-        @param {String} urlToMock the url that you want to respond with your response
-        @param {String} response the text you want the server to send back. Text will try to be
-          evaled into JSON so that responseJSON can be set.
-        @param {Number} status (optional) the response code you want the server to send
-        
-        @example
-          TH.Ajax.mock("/a_url", "someText", 200);
-          var ajx = new Ajax.Request("/a_url", {
-              onComplete: function (resp) { response = resp }
-          });
-          expect(response.responseText).to(equal, "someText");
-        
-        @name TH.Ajax.mock
-        @function
-    */
-    publicObj.mock = function (urlToMock, response, status) {
-        status = status || 200;
-        mockAjaxHash[urlToMock] = { response: response, status: status };
-        
-        Ajax = {};
-        Ajax.Request = function(url, opts) {
-            if (!mockAjaxHash.hasOwnProperty(url)) {
-                throw new Error("ajax request called with: " + url + " but no mock was found");
-            }
-            
-            if (!publicObj.requestCount[url]) {
-                publicObj.requestCount[url] = 1;
-            } else {
-                publicObj.requestCount[url]++;
-            }
-            
-            if(opts.onComplete || opts.onSuccess || opts.onFailure) {
-                response = {};
-                response.responseText = mockAjaxHash[url].response;
-                response.status = mockAjaxHash[url].status;
-                try {
-                    response.responseJSON = response.responseText.evalJSON();
-                } catch (e) {
-                    response.responseJSON = null;
-                }
-                
-                if ((response.status == 200) && opts.onSuccess) {
-                    opts.onSuccess(response);
-                } else {                    
-                    if (opts.onFailure) {
-                        opts.onFailure(response);
-                    }
-                }
-                if (opts.onComplete) {
-                    opts.onComplete(response);
-                }
-            }
-        };
-    };
-    
-    return publicObj;
-})();
-
 Screw.Unit(function() {
     before(function() {
         if (jQuery("#dom_test")) {
             jQuery('#dom_test').empty();
         }
-        TH.Ajax.reset();
-        TH.Mock.reset();
+        Screw.Prototype.Ajax.reset();
     });
 });
diff --git a/lib/screw.prototype.js b/lib/screw.prototype.js
new file mode 100644
index 0000000..27766f9
--- /dev/null
+++ b/lib/screw.prototype.js
@@ -0,0 +1,105 @@
+Screw.Prototype = {};
+
+/** This mocks out Prototype's ajax calls so that you don't need a server in your tests
+    @example
+      Screw.Prototype.Ajax.mock("/a_url", "someText", 200);
+      var ajx = new Ajax.Request("/a_url", {
+          onComplete: function (resp) { response = resp }
+      });
+      expect(response.responseText).to(equal, "someText");
+      
+    @namespace
+*/
+Screw.Prototype.Ajax = (function () {
+    /** @namespace */
+    var publicObj = {};
+    
+    var mockAjaxHash = {};
+    
+    /** Lets you count the number of requests on a certain URL
+        @example
+          Screw.Prototype.Ajax.mock("/a_url", "someText", 200);
+           var ajx = new Ajax.Request("/a_url", {
+               onComplete: function (resp) { response = resp }
+           });
+           expect(Screw.Prototype.Ajax.requestCont["/a_url"]).to(equal, 1);
+    
+        @name Screw.Prototype.Ajax.requestCount
+    */
+    publicObj.requestCount = {};
+    
+    /** Reset the request count - used in a before()
+        @name Screw.Prototype.Ajax.reset
+        @function
+    */
+    publicObj.reset = function () {
+        publicObj.requestCount = {};
+    };
+    
+    /** this is the main mocking interface
+        @param {String} urlToMock the url that you want to respond with your response
+        @param {String} response the text you want the server to send back. Text will try to be
+          evaled into JSON so that responseJSON can be set.
+        @param {Number} status (optional) the response code you want the server to send
+        
+        @example
+          Screw.Prototype.Ajax.mock("/a_url", "someText", 200);
+          var ajx = new Ajax.Request("/a_url", {
+              onComplete: function (resp) { response = resp }
+          });
+          expect(response.responseText).to(equal, "someText");
+        
+        @name Screw.Prototype.Ajax.mock
+        @function
+    */
+    publicObj.mock = function (urlToMock, response, status) {
+        status = status || 200;
+        mockAjaxHash[urlToMock] = { response: response, status: status };
+        
+        Ajax = {};
+        Ajax.Request = function(url, opts) {
+            if (!mockAjaxHash.hasOwnProperty(url)) {
+                throw new Error("ajax request called with: " + url + " but no mock was found");
+            }
+            
+            if (!publicObj.requestCount[url]) {
+                publicObj.requestCount[url] = 1;
+            } else {
+                publicObj.requestCount[url]++;
+            }
+            
+            if(opts.onComplete || opts.onSuccess || opts.onFailure) {
+                response = {};
+                response.responseText = mockAjaxHash[url].response;
+                response.status = mockAjaxHash[url].status;
+                try {
+                    response.responseJSON = response.responseText.evalJSON();
+                } catch (e) {
+                    response.responseJSON = null;
+                }
+                
+                if ((response.status == 200) && opts.onSuccess) {
+                    opts.onSuccess(response);
+                } else {                    
+                    if (opts.onFailure) {
+                        opts.onFailure(response);
+                    }
+                }
+                if (opts.onComplete) {
+                    opts.onComplete(response);
+                }
+            }
+        };
+    };
+    
+    return publicObj;
+})();
+
+Screw.Unit(function() {
+    before(function() {
+        if (jQuery("#dom_test")) {
+            jQuery('#dom_test').empty();
+        }
+        Screw.Prototype.Ajax.reset();
+    });
+});
diff --git a/spec/mock_spec.js b/spec/mock_spec.js
index 3e8225d..63873f1 100644
--- a/spec/mock_spec.js
+++ b/spec/mock_spec.js
@@ -1,8 +1,8 @@
 Screw.Unit(function() {
     
-    describe("TH.insertDomMock", function () {
+    describe("Screw.Mock.insertDom", function () {
         before(function () {
-            TH.insertDomMock("dom_mock_test")
+            Screw.Mock.insertDom("dom_mock_test")
         });
         
         it("should add the file to the DOM", function () {
@@ -10,233 +10,20 @@ Screw.Unit(function() {
         });
     });
     
-    describe("TH.click", function () {
+    describe("Screw.Mock.click", function () {
         var clickReceived;
         before(function () {
             clickReceived = false;
-            TH.insertDomMock("click_test");
+            Screw.Mock.insertDom("click_test");
             jQuery("#click_tester").bind("click", function () {
                 clickReceived = true;
             });
         });
         
         it("should fire the browser click event", function () {
-            TH.click(jQuery("#click_tester")[0]);
+            Screw.Mock.click(jQuery("#click_tester")[0]);
             expect(clickReceived).to(be_true);
         });        
     });
-    
-    describe("TH.Ajax", function () {
-        var response;
-        before(function () {
-            TH.Ajax.mock("/a_url", "someText", 200);
-        });
-        
-        it("should send the response you added to the onComplete function", function () {
-            var ajx = new Ajax.Request("/a_url", {
-                onComplete: function (resp) { response = resp }
-            });
-            expect(response.responseText).to(equal, "someText");
-        });
-        
-        it("should send the response you added to the onSuccess function when the response is a 200", function () {
-            var ajx = new Ajax.Request("/a_url", {
-                onSuccess: function (resp) { response = resp }
-            });
-            expect(response.responseText).to(equal, "someText");
-        });
-        
-        it("should send the response to onFailure when the response is not a 200", function () {
-            TH.Ajax.mock("/a_url", "someText", 400);
-            var ajx = new Ajax.Request("/a_url", {
-                onFailure: function (resp) { response = resp }
-            });
-            expect(response.responseText).to(equal, "someText");
-        });
-        
-        it("should raise when you call an unmocked ajax url", function () {
-            var raised = false;
-            try {
-                var ajx = new Ajax.Request("/a_different_url");
-            } catch (e) {
-                raised = true;
-            }
-            expect(raised).to(be_true);
-        });
-        
-        it("should do responseJSON when the response is JSON if Prototype is included", function () {
-            if (!window.Prototype){return}
-            TH.Ajax.mock("/a_url", "{'foo': 'bar'}", 200);
-            var ajx = new Ajax.Request("/a_url", {
-                onComplete: function (resp) { response = resp }
-            });
-            expect(response.responseJSON.foo).to(equal, 'bar');
-        });
-        
-    });
-    
-    describe('TH.Mock', function() {
-        
-        // global scope
-        simpleObject = {
-            property: 'a property',
-            func: function (arg) {
-                return arg;
-            },
-            anotherFunction: function (arg) {
-                return arg;
-            }
-        };
-        
-        // global scope
-        complexObject = (function () {
-            var publicObj = {};
-
-            var privateProperty = 'privateProperty';
-
-            var privateFunction = function (arg) {
-                return arg;
-            };
-
-            publicObj.publicFunction = function () {
-                return privateFunction('privateFunctionWorked');
-            };
 
-            publicObj.publicProperty = "publicProperty";
-
-            return publicObj;
-        })();
-        
-        // global scope
-        nestedObject = {
-            someObj: {
-                foo: 'bar',
-                someOtherObj: {
-                    deepNest: 'bar'
-                }
-            }
-        };
-        
-        describe('mocking a function', function () {
-            it("should keep the unmocked functions", function () {
-               TH.Mock.obj("simpleObject");
-               expect(simpleObject.anotherFunction('arbitrary')).to(equal, 'arbitrary'); 
-            });
-            
-            describe('with a nested object', function () {
-                it("should mock the object", function () {
-                    TH.Mock.obj("nestedObject", {
-                        someObj: {
-                            foo: 'different',
-                            someOtherObj: {
-                                deepNest: "different"
-                            }
-                        }
-                    });
-                    expect(nestedObject.someObj.foo).to(equal, 'different');
-                    expect(nestedObject.someObj.someOtherObj.deepNest).to(equal, 'different');
-                });
-                
-                it("should be restored on the next test", function () {
-                    expect(nestedObject.someObj.foo).to(equal, 'bar');
-                    expect(nestedObject.someObj.someOtherObj.deepNest).to(equal, 'bar');
-                });
-            });
-            
-            describe('with a simple object', function () {
-               it("should replace the function", function () {
-                  TH.Mock.obj("simpleObject", {
-                      func: function () {
-                          return "functionMocked";
-                      }
-                  });
-                  expect(simpleObject.func()).to(equal, "functionMocked");
-               });
-               
-               it("should restore the function after tests", function () {
-                   expect(simpleObject.func('arbitrary')).to(equal, 'arbitrary');
-               });
-               
-            });
-            
-            describe('with a complex object', function () {
-               it("should replace the function", function () {
-                  TH.Mock.obj("complexObject", {
-                      publicFunction: function () {
-                          return "functionMocked";
-                      }
-                  });
-                  expect(complexObject.publicFunction()).to(equal, "functionMocked");
-               });
-               
-               it("should restore thre function after tests", function () {
-                   expect(complexObject.publicFunction()).to(equal, 'privateFunctionWorked');
-               });
-               
-            });
-            
-            
-        });
-        
-        describe('counting calls to a function (without executing it)', function () {
-            
-            it("should look up calls from an object without needing the object", function () {
-                var mockedSimpleObj = TH.Mock.obj("simpleObject");
-                mockedSimpleObj.countCallsOf("func");
-                simpleObject.func();
-                
-                expect(TH.Mock.numberOfCallsTo('simpleObject', 'func')).to(equal, 1);
-            });
-            
-            describe("with a simple object", function () {
-               var mockedSimpleObj;
-               
-               it("should count 1 call", function () {
-                   mockedSimpleObj = TH.Mock.obj("simpleObject");
-                   mockedSimpleObj.countCallsOf("func");
-                   simpleObject.func();
-                   expect(mockedSimpleObj.numberOfCallsTo("func")).to(equal, 1);
-               });
-               
-               it("should count more than 1 call", function () {
-                   mockedSimpleObj = TH.Mock.obj("simpleObject");
-                   mockedSimpleObj.countCallsOf("func");
-                   simpleObject.func();
-                   simpleObject.func();
-                   expect(mockedSimpleObj.numberOfCallsTo("func")).to(equal, 2);
-               });
-               
-               it("should restore the function after the test is run", function () {
-                    expect(simpleObject.func('arbitrary')).to(equal, 'arbitrary');
-               });
-               
-            });
-            
-            describe("with a complex object", function () {
-               var mockedObj;
-               it("should count 1 call", function () {
-                   mockedObj = TH.Mock.obj("complexObject");
-                   mockedObj.countCallsOf("publicFunction");
-                   complexObject.publicFunction();
-                   expect(mockedObj.numberOfCallsTo("publicFunction")).to(equal, 1);
-               });
-               
-               it("should count more than 1 call", function () {
-                   mockedObj = TH.Mock.obj("complexObject");
-                   mockedObj.countCallsOf("publicFunction");
-                   complexObject.publicFunction();
-                   complexObject.publicFunction();
-                   expect(mockedObj.numberOfCallsTo("publicFunction")).to(equal, 2);
-               });
-               
-               it("should restore the function after the test is run", function () {
-                    expect(complexObject.publicFunction()).to(equal, 'privateFunctionWorked');
-               });
-               
-            });
-            
-            
-        });
-        
-    });
 });
diff --git a/spec/prototype_spec.js b/spec/prototype_spec.js
new file mode 100644
index 0000000..ac95739
--- /dev/null
+++ b/spec/prototype_spec.js
@@ -0,0 +1,55 @@
+Screw.Unit(function() {
+    
+    describe("Screw.Prototype.Ajax", function () {
+        var response;
+        before(function (me) {
+            if (!window.Prototype) {
+                skip(me).because("Prototype is not running in this test");
+            }
+            Screw.Prototype.Ajax.mock("/a_url", "someText", 200);
+        });
+        
+        it("should send the response you added to the onComplete function", function () {
+            var ajx = new Ajax.Request("/a_url", {
+                onComplete: function (resp) { response = resp }
+            });
+            expect(response.responseText).to(equal, "someText");
+        });
+        
+        it("should send the response you added to the onSuccess function when the response is a 200", function () {
+            var ajx = new Ajax.Request("/a_url", {
+                onSuccess: function (resp) { response = resp }
+            });
+            expect(response.responseText).to(equal, "someText");
+        });
+        
+        it("should send the response to onFailure when the response is not a 200", function () {
+            Screw.Prototype.Ajax.mock("/a_url", "someText", 400);
+            var ajx = new Ajax.Request("/a_url", {
+                onFailure: function (resp) { response = resp }
+            });
+            expect(response.responseText).to(equal, "someText");
+        });
+        
+        it("should raise when you call an unmocked ajax url", function () {
+            var raised = false;
+            try {
+                var ajx = new Ajax.Request("/a_different_url");
+            } catch (e) {
+                raised = true;
+            }
+            expect(raised).to(be_true);
+        });
+        
+        it("should do responseJSON when the response is JSON if Prototype is included", function () {
+            if (!window.Prototype){return}
+            Screw.Prototype.Ajax.mock("/a_url", "{'foo': 'bar'}", 200);
+            var ajx = new Ajax.Request("/a_url", {
+                onComplete: function (resp) { response = resp }
+            });
+            expect(response.responseJSON.foo).to(equal, 'bar');
+        });
+        
+    });
+
+});
diff --git a/spec/suite.html b/spec/suite.html
index 474c213..508891d 100644
--- a/spec/suite.html
+++ b/spec/suite.html
@@ -9,6 +9,7 @@
     <script src="../lib/screw.behaviors.js"></script>
     <script src="../lib/screw.mock.js"></script>
     <script src="../lib/screw.stub.js"></script>
+    <script src="../lib/screw.prototype.js"></script>
     
     <script src="spec_helper.js"></script>
     <script src="behaviors_spec.js"></script>
@@ -18,6 +19,9 @@
     <script src="stub_spec.js"></script>
     <script src="asynchronous_spec.js"></script>
     <script src="skipping_spec.js"></script>
+    <script src="print_spec.js"></script>
+    <script src="prototype_spec.js"></script>
+    
 
     <link rel="stylesheet" href="../lib/screw.css">
   </head>
